import Head from 'next/head'
import {Inter} from 'next/font/google'
import {invoke} from '@tauri-apps/api/tauri'
import styles from '@/styles/Home.module.css'
import {useEffect, useState} from 'react'
import ContentSidelineItem from "@/components/ContentSidelineItem";

const inter = Inter({subsets: ['latin']})

// Note: When working with Next.js in development you have 2 execution contexts:
// - The server (nodejs), where Tauri cannot be reached, because the current context is inside of nodejs.
// - The client (webview), where it is possible to interact with the Tauri rust backend.
// To check if we are currently executing in the client context, we can check the type of the window object;
const isClient = typeof window !== 'undefined'

// Now we can call our Command!
// Right-click on the application background and open the developer tools.
// You will see "Hello, World!" printed in the console.
// isClient &&
//   invoke('greet', { name: 'World' }).then(console.log).catch(console.error)

export default function Home() {
  useEffect(() => {
    invoke('greet', {name: 'World'})
      .then(console.log)
      .catch(console.error)
  }, [])

  // title
  const [title, setTitle] = useState('')
  const [contents, setContents] = useState('')
  const [labels, setLabels] = useState('')
  const [summary, setSummary] = useState('')

  // TODO - list of links that are fetched and parsed
  // const [links, setLinks] = useState('')

  // TODO - file upload. start with pdf

  const [loadingClass, setLoadingClass] = useState('')

  // TODO - get existing articles and their summaries on first load
  const [contentsList, setContentsList] = useState([])
  useEffect(() => {
    invoke('get_contents')
      .then(res => {
        console.log(res)
        setContentsList(res)
      })
      .catch(console.error)
  }, [summary])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
        {/* FIXME - linked css not ideal for production release */}
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css"></link>
      </Head>
      <main className={styles.main}>

        <div className="container is-fluid">
          <div className="columns">

            <div className="column is-three-quarters mt-4">
              {/* input for title */}
              <div className="field">
                <label className="label">Title</label>
                <div className="control">
                  <input className="input is-primary"
                         type="text"
                         value={title}
                         onChange={e => setTitle(e.target.value)}/>
                </div>
              </div>

              <div className="field">
                <label className="label">Contents</label>
                <div className="control">
                  <textarea name=""
                            id=""
                            className="textarea is-primary"
                            rows={10}
                            value={contents}
                            onChange={e => setContents(e.target.value)}>
                  </textarea>
                </div>
              </div>

              <div className="field">
                <label className="label">Summary</label>
                <div className="control">
                  <textarea name=""
                            id=""
                            className="textarea is-primary"
                            rows={3}
                            value={summary}
                            readOnly={true}
                            placeholder={'summary'}>
                  </textarea>
                </div>
              </div>
              <div className="field">
                <div className="control">
                  <label className="label">Labels</label>
                  <textarea name=""
                            id=""
                            className="textarea is-primary"
                            rows={1}
                            value={labels}
                            readOnly={true}
                            placeholder={'labels'}>
                  </textarea>
                </div>
              </div>
            </div>

            <div className="column">
              <div className="container mt-4">
                <h1 className="title has-text-centered">Previous summaries</h1>
                {contentsList.map(content => (<ContentSidelineItem key={content.id} content={content}/>))}
              </div>
            </div>
          </div>
          <button className={"button is-primary " + loadingClass}
                  onClick={() => {
                    setLoadingClass('is-loading')
                    invoke('get_summary_and_labels', {title: title, text: contents})
                      .then(res => {
                        console.log(res)
                        setSummary(res.summary)
                        setLabels(res.labels.join(', '))
                        // setTitle('')
                        // setContents('')
                        setLoadingClass('')
                      })
                      .catch(console.error)
                  }}>
            Submit
          </button>
        </div>
      </main>
    </>
  )
}
